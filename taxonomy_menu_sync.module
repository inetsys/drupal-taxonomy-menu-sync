<?php

/** Implements hook_permission() */
function taxonomy_menu_sync_permission(){
	$perms = array(
		'administer taxonomy menu sync' => array(
			'title' => t('Administer taxonomy menu sync')
		),
		'create synchronized taxonomy terms' => array(
			'title' => t('Create synchronized taxonomy terms')
		)
	);

	module_load_include('inc', 'taxonomy_menu_sync');
	foreach(menu_load_all() as $menu){
		$vocabulary = taxonomy_menu_sync_get_synchronized_vocabulary($menu['menu_name']);
		if(!$vocabulary){
			continue;
		}
		$bundles = variable_get('taxonomy_menu_sync_bundles_'.$vocabulary->machine_name, array());
		foreach($bundles as $bundle){
			$perms['create synchronized '.$bundle['machine_name'].' term in '.$menu['menu_name']] = array(
				'title' => t('Create synchronized term of bundle %bundle in menu %menu', array(
					'%bundle' => $bundle['name'],
					'%menu' => $menu['title']
				)),
			);
		}
	}

	return $perms;
}

/** Implements hook_help() */
function taxonomy_menu_sync_help($path, $arguments){
	switch($path){
		case 'admin/structure/menu/manage/%':
			return '<p>'.t('It is not allowed to delete menu items which have children. Please remove children links prior to deleting the parent item.').'</p>';
	}
}

/** Implements hook_menu() */
function taxonomy_menu_sync_menu(){
	$items = array();

	$items['admin/structure/taxonomy/sync-menu'] = array(
		'title' => 'Sync menu',
		'access arguments' => array('administer taxonomy menu sync'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('taxonomy_menu_sync_settings_form'),
		'file' => 'taxonomy_menu_sync.admin.inc'
	);

	$items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/bundles'] = array(
		'title' => 'Bundles',
		'page callback' => 'taxonomy_menu_sync_vocabulary_bundles',
		'page arguments' => array(3),
		'access arguments' => array('administer taxonomy'),
		'file' => 'taxonomy_menu_sync.admin.inc',
	);
	$items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/bundles/add'] = array(
		'title' => 'Add bundle',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('taxonomy_menu_sync_vocabulary_add_bundle', 3),
		'access arguments' => array('administer taxonomy'),
		'type' => MENU_LOCAL_ACTION,
		'weight' => 0,
		'file' => 'taxonomy_menu_sync.admin.inc'
	);
	$items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/bundles/%taxonomy_bundle_machine_name'] = array(
		'title' => 'Taxonomy bundle',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('taxonomy_menu_sync_vocabulary_edit_bundle', 3, 5),
		'access arguments' => array('administer taxonomy'),
		'file' => 'taxonomy_menu_sync.admin.inc',
	);
	$items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/bundles/%taxonomy_bundle_machine_name/edit'] = array(
		'title' => 'Edit',
		'type' => MENU_DEFAULT_LOCAL_TASK,
	);
	$items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/bundles/%taxonomy_bundle_machine_name/fields'] = array(
		'title' => 'Manage fields',
		'type' => MENU_LOCAL_TASK,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('taxonomy_menu_sync_vocabulary_manage_bundle_fields', 3, 5),
		'access arguments' => array('administer taxonomy'),
		'file' => 'taxonomy_menu_sync.admin.inc',
		'weight' => 0
	);
	$items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/bundles/%taxonomy_bundle_machine_name/delete'] = array(
		'title' => 'Delete',
		'type' => MENU_LOCAL_TASK,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('taxonomy_menu_sync_vocabulary_delete_bundle', 3, 5),
		'access arguments' => array('administer taxonomy'),
		'file' => 'taxonomy_menu_sync.admin.inc',
		'weight' => 1
	);

	$items['admin/structure/menu/manage/%menu/add-item/%taxonomy_bundle_machine_name'] = array(
		'title' => 'Add new section',
		'type' => MENU_CALLBACK,
		'access callback' => '_taxonomy_menu_sync_access_callback_menu_add_item',
		'access arguments' => array(4, 6),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('taxonomy_menu_sync_add_taxonomy_term_form', 4, 6),
	);

	if(variable_get('taxonomy_menu_sync_add_default_action', true)){
		$items['sync_tax'] = array(
			'title' => 'Section',
			'access arguments' => array('access content'),
			'page callback' => '_taxonomy_menu_sync_dummy_menu',
			'page arguments' => array(),
		);
	}

	// Add bundle term
	$vocabularies = taxonomy_get_vocabularies();
	foreach($vocabularies as $vocabulary){
		$bundles = variable_get('taxonomy_menu_sync_bundles_'.$vocabulary->machine_name, array());
		foreach($bundles as $bundle){
			$items['admin/structure/taxonomy/'.$vocabulary->machine_name.'/bundles/'.str_replace('_', '-', $bundle['machine_name']).'/add'] = array(
				'title' => 'Add '.$bundle['name'],
				'page callback' => 'drupal_get_form',
				'page arguments' => array('taxonomy_menu_sync_vocabulary_add_term_of_bundle', 3, 5),
				'access arguments' => array('administer taxonomy'),
				'type' => MENU_LOCAL_ACTION,
				'weight' => 0,
				'file' => 'taxonomy_menu_sync.admin.inc'
			);
		}
	}

	return $items;
}

/** Load function for taxonomy_bundle_machine_name */
function taxonomy_bundle_machine_name_load($name){
	return str_replace('-', '_', $name);
}

/** Implements hook_menu_alter() */
function taxonomy_menu_sync_menu_alter(&$items){
	$items['admin/structure/menu/item/%menu_link/delete']['access callback'] = '_taxonomy_menu_sync_access_callback_menu_link_delete';
	$items['admin/structure/menu/item/%menu_link/delete']['access arguments'][] = 4;

	if(isset($items['admin/structure/menu/manage/add_existing_content'])){
		unset($items['admin/structure/menu/manage/add_existing_content']);
	}
}

/** Access callback to admin/structure/menu/item/%menu_link/delete */
function _taxonomy_menu_sync_access_callback_menu_link_delete($perm, $link){
	// Do NOT allow to delete links with children
	return user_access($perm) && !$link['has_children'];
}
/** Access callback to admin/structure/menu/manage/%menu/add-item/%taxonomy_bundle_machine_name */
function _taxonomy_menu_sync_access_callback_menu_add_item($menu, $bundle_machine_name){
	if(!user_access('create synchronized taxonomy terms') && !user_access('create synchronized '.$bundle_machine_name.' term in '.$menu['menu_name'])){
		return false;
	}

	// Do NOT allow to add synchronized items to non-synchronized menus
	module_load_include('inc', 'taxonomy_menu_sync');
	$vocabulary = taxonomy_menu_sync_get_synchronized_vocabulary($menu['menu_name']);
	if(!$vocabulary){
		return false;
	}

	$bundles = variable_get('taxonomy_menu_sync_bundles_'.$vocabulary->machine_name, array());
	if(!isset($bundles[$bundle_machine_name])){
		return false;
	}

	$menu_item = content_menu_get_menu_item_from_querystring();
	if(empty($menu_item)){
		return false;
	}

	return true;
}

/** Callback function for /sync_tax */
function _taxonomy_menu_sync_dummy_menu(){
	return '';
}

/** Implements hook_module_implements_alter() */
function taxonomy_menu_sync_module_implements_alter(&$implementations, $hook){
	if(in_array($hook, array('node_insert', 'node_update')) && isset($implementations['taxonomy'])){
		unset($implementations['taxonomy']);
	}
}

/** Implements hook_node_insert() */
function taxonomy_menu_sync_node_insert($node){
	// Add taxonomy index entries for the node.
	taxonomy_menu_sync_build_node_index($node);
}

/** Implements hook_node_update() */
function taxonomy_menu_sync_node_update($node){
	taxonomy_delete_node_index($node);
	taxonomy_menu_sync_build_node_index($node);
}

/** Implements hook_node_delete() */
function taxonomy_menu_sync_node_delete($node){
	// Clean up the {taxonomy_index} table when nodes are deleted.
	taxonomy_delete_node_index($node);
}

/** Builds and inserts taxonomy index entries for a given node */
function taxonomy_menu_sync_build_node_index($node){
	// Modules that define taxonomy fields
	$taxonomy_fields_modules = variable_get('taxonomy_fields_modules', array('taxonomy', 'tms_field'));

	if(variable_get('taxonomy_maintain_index_table', TRUE)){
		// If a node property is not set in the node object when node_save() is
		// called, the old value from $node->original is used.
		if(!empty($node->original)){
			$sticky = (int)(!empty($node->sticky) || (!isset($node->sticky) && !empty($node->original->sticky)));
		}else{
			$sticky = (int)(!empty($node->sticky));
		}
	}

	// Collect a unique list of all the term IDs from all node fields.
	$tid_all = array();
	foreach(field_info_instances('node', $node->type) as $instance){
		$field_name = $instance['field_name'];
		$field = field_info_field($field_name);
		if(in_array($field['module'], $taxonomy_fields_modules) && $field['storage']['type'] == 'field_sql_storage'){
			// If a field value is not set in the node object when node_save() is
			// called, the old value from $node->original is used.
			if(isset($node->{$field_name})){
				$items = $node->{$field_name};
			}elseif(isset($node->original->{$field_name})){
				$items = $node->original->{$field_name};
			}else{
				continue;
			}
			foreach(field_available_languages('node', $field) as $langcode){
				if(!empty($items[$langcode])){
					foreach($items[$langcode] as $item){
						$tid_all[$item['tid']] = $item['tid'];
					}
				}
			}
		}
	}

	// Insert index entries for all the node's terms.
	if(!empty($tid_all)){
		$query = db_insert('taxonomy_index')->fields(array('nid', 'tid', 'sticky', 'created'));
		foreach($tid_all as $tid){
			$query->values(array(
				'nid' => $node->nid,
				'tid' => $tid,
				'sticky' => $sticky,
				'created' => $node->created,
			));
		}
		$query->execute();
	}
}

/** Implements hook_menu_link_insert() */
function taxonomy_menu_sync_menu_link_insert($item){
	module_load_include('inc', 'taxonomy_menu_sync');

	$menu_name = $item['menu_name'];
	if(isset($item['term']) && $vocabulary = taxonomy_menu_sync_get_synchronized_vocabulary($menu_name)){
		$label = $item['link_title'];
		$parent_term = taxonomy_term_sync_get_taxonomy_term($item['plid']);
		$weight = $item['weight'];

		// Save new term
		$term = $item['term'];
		if(!isset($term->tid)){
			$term->vid = $vocabulary->vid;
			$term->vocabulary_machine_name = $vocabulary->machine_name;
			$term->name = $label;
			$term->parent = $parent_term ? $parent_term->tid : 0;
			$term->weight = $weight;
		}

		taxonomy_term_save($term);

		// Add new relation
		taxonomy_menu_sync_add_relation($term->tid, $item['mlid']);

		// Update link path to the referenced term
		if(isset($item['term']) || (isset($item['target_content']) && $item['target_content'] == 'tax_sync')){
			taxonomy_menu_sync_update_menu_link($term->tid, $item['mlid']);
		}
	}
}

/** Implements hook_menu_link_update() */
function taxonomy_menu_sync_menu_link_update($item){
	module_load_include('inc', 'taxonomy_menu_sync');

	$menu_name = $item['menu_name'];
	if($vocabulary = taxonomy_menu_sync_get_synchronized_vocabulary($menu_name) && $term = taxonomy_term_sync_get_taxonomy_term($item['mlid'])){
		$menu_parent_term = taxonomy_term_sync_get_taxonomy_term($item['plid']);
		$parent_tid = $menu_parent_term ? $menu_parent_term->tid : 0;

		$updated_term = taxonomy_menu_update_menu_item_referenced_term($item, $term, $parent_tid);

		// Fields
		if(isset($item['term'])){
			foreach(get_object_vars($item['term']) as $field => $value){
				$updated_term->{$field} = $value;
			}

			taxonomy_term_save($updated_term);
		}
	}
}

/** Implements hook_menu_link_delete() */
function taxonomy_menu_sync_menu_link_delete($item){
	module_load_include('inc', 'taxonomy_menu_sync');

	$term = taxonomy_term_sync_get_taxonomy_term($item['mlid']);
	if($term){
		$menu_name = $item['menu_name'];
		if($vocabulary = taxonomy_menu_sync_get_synchronized_vocabulary($menu_name)){
			$relations = taxonomy_menu_get_term_relations($term->tid);
			if(count($relations) == 1 && in_array($item['mlid'], $relations)){
				module_invoke_all('taxonomy_term_sync_deleted', $term);
				taxonomy_term_delete($term->tid);
			}else{
				taxonomy_menu_sync_delete_relation($term->tid, $item['mlid']);
			}
		}
	}
}

/** Implements hook_menu_item_element_alter() */
function taxonomy_menu_sync_menu_item_element_alter(&$element){
	$item = $element['#item'];

	// If item has children, do not allow to delete it
	if($item['has_children'] && isset($element['operations']['delete'])){
		unset($element['operations']['delete']);
	}

	// @todo Describe bundles
	if($item['router_path'] == 'taxonomy/term/%'){
		// Set title 'Section' if it references a taxonomy term
		module_load_include('inc', 'taxonomy_menu_sync');
		$term = taxonomy_term_sync_get_taxonomy_term($item['mlid']);
		$bundle = taxonomy_menu_sync_get_term_bundle($term);

		$element['target_content']['#markup'] = $term && $bundle ? ucfirst($bundle['name']) : t('Section');

		if($term && $bundle){
			$options = module_invoke_all('menu_item_element_bundle_operations', $item, $term, $bundle);
			$element['operations'] = array_merge($element['operations'], $options);
		}

		// Remove operation "Select existing content"
		if(isset($element['operations']['selectcontent'])){
			unset($element['operations']['selectcontent']);
		}
	}
}

/** Implements hook_menu_item_target_types_alter() */
function taxonomy_menu_sync_menu_item_target_types_alter(&$target_types, $context){
	module_load_include('inc', 'taxonomy_menu_sync');
	$menu_name = $context['menu_name'];
	if($vocabulary = taxonomy_menu_sync_get_synchronized_vocabulary($menu_name)){
		$default_actions = variable_get('taxonomy_menu_sync_default_actions', array(
			'dummy' => false,
			'tax_sync' => 'tax_sync',
			'url' => 'url',
			'existing' => 'existing',
		));

		if(isset($default_actions['tax_sync']) && $default_actions['tax_sync']){
			// Add tax_sync at the beggining of the list
			$target_types = array_reverse($target_types, true);
			$target_types['tax_sync'] = array(
				'label' => t('New section'),
				'handler' => '_taxonomy_menu_sync_target_type_tax_sync_handler',
				'clean_menu_save_message' => false
			);
			$target_types = array_reverse($target_types, true);
		}

		// Unset disabled default actions
		foreach($default_actions as $key => $active){
			if(isset($target_types[$key]) && !$active){
				unset($target_types[$key]);
			}
		}

		// Taxonomy bundles

		$bundles = variable_get('taxonomy_menu_sync_bundles_'.$vocabulary->machine_name, array());
		foreach($bundles as $key => $data){
			if(user_access('create synchronized '.$data['machine_name'].' term in '.$menu_name)){
				$target_types['bundle_'.$key] = array(
					'label' => $data['name'],
					'handler' => '_taxonomy_menu_target_type_taxonomy_bundle_handler',
					'clean_menu_save_message' => true,
					'arguments' => array(
						'vocabulary' => $vocabulary,
						'bundle' => $data
					)
				);
			}
		}
	}
}
/** Handler for target tax_sync */
function _taxonomy_menu_sync_target_type_tax_sync_handler($form, $form_state, $item){
	drupal_set_message(t('A new menu item has been created.'));
	$item['link_path'] = 'sync_tax';
	content_menu_link_save($item);
}
/** Handler for target bundle */
function _taxonomy_menu_target_type_taxonomy_bundle_handler($form, $form_state, $item, $vocabulary, $bundle){
	// Look for existing item
	$parent_lid = $item['plid'];
	if($parent_lid){
		$parent_term = taxonomy_term_sync_get_taxonomy_term($parent_lid);
		$parent_tid = $parent_term ? $parent_term->tid : 0;
	}else{
		$parent_tid = 0;
	}
	$existing = taxonomy_menu_sync_search_existing_term($vocabulary->vid, $item['title'], $parent_tid);
	if($existing){
		$existing_bundle = taxonomy_menu_sync_get_term_bundle($existing);
		if($bundle['machine_name'] != $existing_bundle['machine_name']){
			drupal_set_message(t('This item already exists in other menu of this web. The type of item cannot be modified, so it will link to a %bundle. !do_not_add_this_item_link', array(
				'%bundle' => $existing_bundle['name'],
				'!do_not_add_this_item_link' => l(t('Do not add this item'), 'admin/structure/menu/manage/'.$item['name']),
			)), 'warning');
			drupal_set_message(t('Complete the process by filling out and saving the form below.'));
			drupal_goto('admin/structure/menu/manage/'.$item['name'].'/add-item/'.str_replace('_', '-', $existing_bundle['machine_name']), array('query' => content_menu_assemble_query_string($item)));
		}
	}

	drupal_set_message(t('You are about to create a new generic menu item linking to a %bundle.', array('%bundle' => $bundle['name'])));
	drupal_set_message(t('Complete the process by filling out and saving the form below.'));
	drupal_goto('admin/structure/menu/manage/'.$item['name'].'/add-item/'.str_replace('_', '-', $bundle['machine_name']), array('query' => content_menu_assemble_query_string($item)));
}

/** Implements hook_taxonomy_term_delete() */
function taxonomy_menu_sync_taxonomy_term_delete($term){
	module_load_include('inc', 'taxonomy_menu_sync');

	taxonomy_menu_sync_delete_all_relations($term->tid);
}

/** Implements hook_form_FORM_ID_alter()
 * Form ID: menu_edit_item
 */
function taxonomy_menu_sync_form_menu_edit_item_alter(&$form, &$form_state){
	module_load_include('inc', 'taxonomy_menu_sync');

	$mlid = $form['mlid']['#value'];
	$menu_link = menu_link_load($mlid);
	$menu_name = $menu_link['menu_name'];

	$vocabulary = taxonomy_menu_sync_get_synchronized_vocabulary($menu_name);
	if($vocabulary){
		$form['original_item'] = array(
			'#type' => 'value',
			'#value' => $menu_link,
		);

		// Clean default options
		$form['link_path']['#disabled'] = true;
		$form['advanced']['expanded']['#access'] = false;
		$form['advanced']['parent']['#access'] = false;
		$form['advanced']['weight']['#access'] = false;

		// Do not allow to delete items with children
		if($form['original_item']['#value']['has_children']){
			$form['actions']['delete']['#access'] = false;
		}

		// Taxonomy term
		$term = taxonomy_term_sync_get_taxonomy_term($mlid);
		if($term){
			$bundle = taxonomy_menu_sync_get_term_bundle($term);
			$bundle_settings = taxonomy_menu_sync_get_bundle_settings($bundle);

			$form['original_term'] = array(
				'#type' => 'value',
				'#value' => $term
			);
			$form['settings'] = array(
				'#type' => 'fieldset',
				'#title' => t('Settings'),
				'#collapsible' => true,
				'#collapsed' => false,
			);

			_taxonomy_menu_sync_alter_term_form($term, $bundle_settings, $form['settings'], $form_state);

			foreach($form['#submit'] as $i => &$callable){
				if($callable == 'menu_edit_item_submit'){
					$callable = 'taxonomy_menu_sync_form_menu_edit_item_alter_submit';
				}
			}
		}
	}
}
function taxonomy_menu_sync_form_menu_edit_item_alter_submit($form, &$form_state){
	$item = $form_state['values'];

	// Term fields
	$term = new stdClass;
	$values = $form_state['values'];
	foreach($values as $field => $value){
		if(strpos($field, 'field_') === 0){
			$term->{$field} = $value;
		}
	}
	$item['term'] = $term;

	// Item properties
	$item['hidden'] = (int) !$item['enabled'];
	unset($item['enabled']);
	$item['options']['attributes']['title'] = $item['description'];
	list($item['menu_name'], $item['plid']) = explode(':', $item['parent']);

	// Build original item
	$original_term = (object) array_intersect_key(get_object_vars($values['original_term']), get_object_vars($term));
	$original_item = $item['original_item'];
	$original_item['term'] = $original_term;
	$original_item['options'] = serialize($original_item['options']);

	if(!menu_link_save($item, $original_item)){
		drupal_set_message(t('There was an error saving the menu link.'), 'error');
	}else{
		drupal_set_message(t('Your configuration has been saved.'));
	}
	$form_state['redirect'] = 'admin/structure/menu/manage/'.$item['menu_name'];
}

/** Menu callback for admin/structure/menu/manage/%menu/add-item/%taxonomy_bundle_machine_name */
function taxonomy_menu_sync_add_taxonomy_term_form($form, &$form_state, $menu, $bundle_machine_name){
	module_load_include('inc', 'taxonomy_menu_sync');

	$vocabulary = taxonomy_menu_sync_get_synchronized_vocabulary($menu['menu_name']);
	$bundles = variable_get('taxonomy_menu_sync_bundles_'.$vocabulary->machine_name, array());
	$bundle = $bundles[$bundle_machine_name];
	$bundle_settings = taxonomy_menu_sync_get_bundle_settings($bundle);

	$menu_item = content_menu_get_menu_item_from_querystring();

	// Form
	$form = array();

	$form['vocabulary'] = array(
		'#type' => 'value',
		'#value' => $vocabulary
	);
	$form['bundle'] = array(
		'#type' => 'value',
		'#value' => $bundle
	);
	$form['bundle_settings'] = array(
		'#type' => 'value',
		'#value' => $bundle_settings
	);

	// Item title
	$form['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Title'),
		'#value' => $menu_item['title'],
		'#disabled' => true
	);

	// Look for existing item
	$parent_lid = $menu_item['plid'];
	if($parent_lid){
		$parent_term = taxonomy_term_sync_get_taxonomy_term($parent_lid);
		$parent_tid = $parent_term ? $parent_term->tid : 0;
	}else{
		$parent_tid = 0;
	}
	$existing = taxonomy_menu_sync_search_existing_term($vocabulary->vid, $menu_item['title'], $parent_tid);
	if($existing){
		$term = $existing;
	}else{
		$term = new stdClass;
		$term->vocabulary_machine_name = $vocabulary->machine_name;
	}

	// Field API
	_taxonomy_menu_sync_alter_term_form($term, $bundle_settings, $form, $form_state);

	$form['actions'] = array(
		'#type' => 'actions'
	);
	$form['actions']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit')
	);

	return $form;
}
function taxonomy_menu_sync_add_taxonomy_term_form_submit($form, &$form_state){
	$values = $form_state['values'];

	$term = isset($values['original_term']) ? $values['original_term'] : new stdClass;
	foreach($values as $field => $value){
		if(strpos($field, 'field_') === 0){
			$term->{$field} = $value;
		}
	}

	$menu_item = content_menu_get_menu_item_from_querystring();
	$menu_item['link_path'] = 'sync_tax';
	$menu_item['term'] = $term;

	content_menu_link_save($menu_item);
}

/** Implements hook_form_FORM_ID_alter()
 * Form ID: taxonomy_form_term
 */
function taxonomy_menu_sync_form_taxonomy_form_term_alter(&$form, &$form_state){
	module_load_include('inc', 'taxonomy_menu_sync');

	$term = isset($form['#entity']) ? $form['#entity'] : false;
	if($term){
		$bundle = taxonomy_menu_sync_get_term_bundle($term);
		if($bundle){
			$bundle_settings = taxonomy_menu_sync_get_bundle_settings($bundle);

			$langcode = entity_language('taxonomy_term', $term);
			$language = $langcode ? field_valid_language($langcode) : LANGUAGE_NONE;

			// Alter fields with bundle_settings
			foreach($bundle_settings as $field_name => $data){
				if(!isset($form[$field_name])){
					continue;
				}

				$field = field_info_field($field_name);
				switch($field['type']){
					case 'text':
					default:
						$key = 'value';
						break;
				}

				switch($data['mode']){
					// Disabled
					case 0:
						if(empty($data['default_value'])){
							unset($form[$field_name]);
						}else{
							$form[$field_name]['#access'] = false;
						}
						break;

					// Visible
					case 1:
						break;

					// Required
					case 2:
						$form[$field_name][$language][0][$key]['#required'] = true;
						break;
				}
			}
		}
	}
}
