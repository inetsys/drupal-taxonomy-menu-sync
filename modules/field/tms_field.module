<?php

/** Implementation of hook_field_info */
function tms_field_field_info(){
	return array(
		'taxonomy_term_bundle_reference' => array(
			'label' => t('Term bundle reference'),
			'description' => t('This field stores a reference to a taxonomy term of a defined taxonomy bundle.'),
			'default_widget' => 'taxonomy_bundle_term_list_widget',
			'default_formatter' => 'taxonomy_term_reference_link',
			'settings' => array(
				'parent' => '0',
				'bundle' => '',
			),
		),
	);
}

/** Implementation of hook_field_settings_form */
function tms_field_field_settings_form($field, $instance, $has_data){
	module_load_include('inc', 'taxonomy_menu_sync');
	module_load_include('inc', 'tms_field');

	// Get proper values for 'allowed_values_function', which is a core setting.
	$vocabularies = taxonomy_get_vocabularies();
	$options = array();
	foreach($vocabularies as $vocabulary){
		$options[$vocabulary->machine_name] = $vocabulary->name;
	}

	$form['parent'] = array(
		'#type' => 'value',
		'#value' => $field['settings']['parent'],
	);
	$bundles = tms_field_get_bundle_options();
	$form['bundle'] = array(
		'#type' => 'select',
		'#title' => t('Taxonomy bundle'),
		'#default_value' => $field['settings']['bundle'],
		'#options' => $bundles,
		'#required' => false,
		'#empty_option' => '',
		'#description' => t('The taxonomy bundle for this field.'),
		'#disabled' => $has_data,
	);

	return $form;
}

/** Implementation of hook_field_is_empty */
function tms_field_field_is_empty($item, $field){
	return empty($item);
}

/** Implementation of hook_field_widget_info */
function tms_field_field_widget_info(){
	return array(
		'taxonomy_bundle_term_list_widget' => array(
			'label' => t('Taxonomy bundle list'),
			'description' => t('Complete list of available taxonomy terms'),
			'field types' => array('taxonomy_term_bundle_reference'),
			'settings' => array(),
			'behaviors' => array(
				'multiple values' => FIELD_BEHAVIOR_CUSTOM,
			),
		),
	);
}

/** Implementation of hook_field_widget_form */
function tms_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element){
	$element['#attached']['css'][] = drupal_get_path('module', 'tms_field').'/'.'tms_field.css';

	$defaults = array();
	foreach($items as $value){
		$tid = $value['tid'];
		$defaults[$tid] = $tid;
	}

	switch($instance['widget']['type']){
		case 'taxonomy_bundle_term_list_widget':
			module_load_include('inc', 'tms_field');

			$indent = '<div class="tree-indent">-</div>';

			list($vocabulary_machine_name, $bundle_machine_name) = explode('|', $field['settings']['bundle']);

			if($vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name)){
				$list = tms_field_get_terms_list($vocabulary, $bundle_machine_name);
				// print_r($list);exit;
				$options = array();

				if($field['cardinality'] == 1){
					$default_value = $defaults ? reset($defaults) : null;

					if(!$instance['required']){
						$options[0] = t('None');
						$default_value = $default_value ? $default_value : 0;
					}
				}else{
					$default_value = $defaults;
				}

				foreach($list as $term){
					$indentation = '';
					for($i = 0; $i < $term->depth; $i++){
						$indentation .= $indent;
					}

					$options[$term->tid] = $term->name;
				}
				$element += array(
					'#type' => $field['cardinality'] == 1 ? 'radios' : 'checkboxes',
					'#options' => $options,
					'#default_value' => $default_value,
					'#taxonomy_bundle' => $bundle_machine_name,
					'#taxonomy_vocabulary' => $vocabulary,
				);
				foreach($list as $term){
					$indentation = '';
					for($i = 0; $i < $term->depth; $i++){
						$indentation .= $indent;
					}
					$element += array(
						$term->tid => array(
							'#prefix' => '<div class="indented-option">'.$indentation,
							'#suffix' => '</div>',
							'#disabled' => $bundle_machine_name && $term->bundle['machine_name'] != $bundle_machine_name,
						)
					);
				}
			}
			break;
	}

	$element += array(
		'#element_validate' => array('tms_field_field_widget_validate'),
	);

	return $element;
}

function tms_field_field_widget_validate($element, &$form_state){
	module_load_include('inc', 'taxonomy_menu_sync');

	$values = array_filter(array_values((array) $element['#value']));
	if($element['#required'] && empty($values)){
		form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
	}

	$valid_values = array();
	foreach($values as $value){
		$term = taxonomy_term_load($value);
		$term_bundle = taxonomy_menu_sync_get_term_bundle($term);
		if(!$term_bundle || $term_bundle['machine_name'] != $element['#taxonomy_bundle'] || $term->vid != $element['#taxonomy_vocabulary']->vid){
			form_error($element, $element['#title'].': '.t('An illegal choice has been detected.'));
		}else{
			$valid_values[] = array('tid' => $value);
		}
	}
	form_set_value($element, $valid_values, $form_state);
}
